import type { Express } from "express";
import { createServer, type Server } from "http";
import { storage } from "./storage";
import path from "path";
import fs from "fs";
import { parseCsvData } from "./utils/csvParser";

export async function registerRoutes(app: Express): Promise<Server> {
  // Load and initialize company data from CSV
  try {
    const csvFilePath = path.resolve(
      process.cwd(),
      "attached_assets/Untitled spreadsheet - Generated by Outscraper Â© (1).csv"
    );
    
    if (fs.existsSync(csvFilePath)) {
      console.log("Loading companies from CSV...");
      const companies = await parseCsvData(csvFilePath);
      
      // Store companies in memory
      for (const company of companies) {
        await storage.createCompany(company);
      }
      console.log(`Loaded ${companies.length} companies from CSV`);
    } else {
      console.log("CSV file not found at:", csvFilePath);
    }
  } catch (error) {
    console.error("Error loading CSV data:", error);
  }

  // API Routes
  
  // Get all companies
  app.get("/api/companies", async (req, res) => {
    try {
      const companies = await storage.getAllCompanies();
      res.json(companies);
    } catch (error) {
      console.error("Error fetching companies:", error);
      res.status(500).json({ error: "Failed to fetch companies" });
    }
  });

  // Get company by slug
  app.get("/api/companies/:slug", async (req, res) => {
    try {
      const { slug } = req.params;
      const company = await storage.getCompanyBySlug(slug);
      
      if (!company) {
        return res.status(404).json({ error: "Company not found" });
      }
      
      res.json(company);
    } catch (error) {
      console.error("Error fetching company:", error);
      res.status(500).json({ error: "Failed to fetch company" });
    }
  });

  // Create a contact/message
  app.post("/api/companies/:slug/contact", async (req, res) => {
    try {
      const { slug } = req.params;
      const company = await storage.getCompanyBySlug(slug);
      
      if (!company) {
        return res.status(404).json({ error: "Company not found" });
      }
      
      // In a real implementation, this would store the contact in a database
      // and potentially send an email or notification
      
      res.json({ success: true, message: "Contact message sent successfully" });
    } catch (error) {
      console.error("Error sending contact message:", error);
      res.status(500).json({ error: "Failed to send contact message" });
    }
  });

  const httpServer = createServer(app);

  return httpServer;
}
